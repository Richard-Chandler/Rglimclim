\name{GLCsim}
\alias{GLCsim}
%- Also NEED an '\alias' for EACH other topic documented here.
\title{Simulation of multisite, multivariate daily time series}
\description{This routine is used to simulate data from models of class \code{\link[=print.GLC.modeldef]{GLC.modeldef}}, typically created via calls to \code{\link{GLCfit}}. The routine can generate univariate or multivariate sequences: the multivariate case is handled by consecutively simulating from a set of linked models in which there are no circular dependencies. Imputation (i.e. simulation conditioned on all available data values) can be performed, as well as unconditional simulation. 
}
\usage{
GLCsim(modeldefs, siteinfo, start, end, nsims, impute.until = end, 
       output = c("daily", "monthly"), which.regions = 0, 
       which.daily = 1:nsims, daily.start = start, daily.end = end, 
       data.file, external.files, simdir, file.prefix, missval = -99.99)
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{modeldefs}{Either an object defining a model for a single variable (for univariate simulation), or a list of such objects, each defining a model for a different variable (multivariate simulation). For most variables, these individual model objects will be of class \code{\link[=print.GLC.modeldef]{GLC.modeldef}}; however, the routine also allows for "precipitation-like" variables for which separate \code{GLC.modeldef} objects are required for occurrence (the probability of a non-zero value i.e. a "wet" day in the case of precipitation) and intensity (the value if non-zero). A precipitation model must itself be specified as a list with named components \code{Occurrence} and \code{Intensity}, which are \code{GLC.modeldef} objects for \code{logistic} and \code{gamma} GLMs respectively.
}
  \item{siteinfo}{A \code{siteinfo} object containing information about the sites to be used in the simulation. This should give all of the attribute values for each site that are required by the models in \code{modeldefs}. It can be generated by a call to \code{\link{make.siteinfo}}. If no value is provided then the routine will use the \code{siteinfo} object provided to the \code{GLCfit} routine during model fitting, after checking that this object (and hence the site definitions) is the same for each of the variables defined in \code{modeldefs}.
}
  \item{start}{Start date for simulation, in format \code{YYYYMM} where \code{YYYY} is the year and \code{MM} is the month (so to start in March 1984, the value should be given as \code{198403}). The first day simulated is the first of the month.
}
  \item{end}{End date for simulation, similarly. The last day simulated is the last of the month.
}
  \item{nsims}{Number of simulations to perform.
}
  \item{impute.until}{A date, in the form \code{YYYYMM}. Simulated values up to and including the last day of this month will be conditioned on all available observations in the data file (see "Details" section below for more on this). The default value is \code{end}, so that all simulated values will be conditioned on all available observations. 
}
  \item{output}{Chooses whether to produce daily output files, monthly output files or both (the default).
}
  \item{which.regions}{A vector of integers containing the codes of regions for which monthly summaries should be produced if monthly outputs have been requested. \strong{NB} region 0 is the entire area. For more on region definitions, see \code{\link[=read.regiondef]{define.regions}} and \code{\link{make.siteinfo}}. 
}
  \item{which.daily}{Vector of simulation numbers for which to produce daily output if this has been requested. Defaults to all simulations.
}
  \item{daily.start}{Start date for daily output, in form \code{YYYYMM}. Default is \code{start} (see above). 
}
  \item{daily.end}{End date for daily output. Default is \code{end}.
}
  \item{data.file}{Name of data file from which to take data for initialisation and imputation. If this is not supplied, the routine will take data from the file that was used for fitting the model(s) in \code{modeldefs} (after checking that this file is the same for all elements of \code{modeldefs}).  
}
  \item{external.files}{Character vector of length 3, giving names of files from which to take "external" covariate data (yearly, monthly and daily) to drive the simulations (see the help to \code{\link{GLCfit}} for more on the use and structure of these files). If not supplied, the routine will take the file names from the model objects in \code{modeldefs}. By contrast with \code{data.file}, here there is no requirement that the external files should be the same for all elements of \code{modeldefs}.
}
  \item{simdir}{Name of directory in which to store the output files. This will be interpreted as a pathname relative to the current working directory (see \code{\link{getwd}}). The routine removes any trailing directory separators "/" and "\\" so that, for example, \code{simdir="TestSim"} and \code{simdir="TestSim/"} have the same effect.
}
  \item{file.prefix}{Output files are named in a structured way as, for example, \code{AshdownSim_Daily_Sim0001.dat}. Here, \code{AshdownSim} is a user-specified character string  defined via the \code{file.prefix} argument, and the remainder of the filename is generated automatically. By default, \code{file.prefix} is the same as \code{simdir} with any leading dots and slashes removed.
}
  \item{missval}{The value representing missing observations in the input file. The default of -99.99 is the same as that used in \code{\link{GLCfit}}. 
}
}
\details{This routine is designed to be used with one or more models that have been fitted to a single univariate or multivariate dataset using \code{\link{GLCfit}}. The result of a call to \code{GLCfit} is a \code{GLC.modeldef} object which stores the name of the file containing the data used for model fitting in component \code{$filenames$Data}, and also stores the names of the variables in that file in component \code{$var.names}. If the argument \code{data.file} is not supplied, the simulation routine expects to find this data file in the current working directory; data from the file will be used to initialise simulations, and also for conditioning purposes when imputing missing values (see below for more on both of these points). All of the models defined in \code{modeldefs} must reference the same data file; failure to do this will lead to an error. 

The routine does not attempt to store the results of simulations internally within memory (see "Value" below for details of what \emph{is} stored); instead, it writes \code{ASCII} files to the directory specified by the \code{simdir} argument. Control over these files is provided by the \code{output}, \code{which.regions}, \code{which.daily}, \code{daily.start}, \code{daily.end} and \code{file.prefix} arguments. 

The data file may contain variables that are not required by the user when simulating. In this case, the output files will still contain columns corresponding to the non-simulated variables; thus the format of each of the daily output files is exactly the same as that as the original data file (see the \code{data.file} argument to \code{\link{GLCfit}} for details of this format). 

The format of monthly output files is as follows:

\itemize{
\item There is one row for each year / region combination; rows are ordered by year, and within that by region. 
\item Each row gives the year, region code and \eqn{M} sets of 13 simulated values, where \eqn{M} is the number of variables in the data file (including those that were not simulated). Each set of simulated values contains 12 monthly means for that variable, and an annual mean. 
\item The FORTRAN format for reading each record is \code{I4,1X,I3,1X,M(13(F6.2,1X))} where \code{M} is the number of variables in the data file.
\item Missing values (due to a lack of any non-missing daily values) are coded as \code{missval}. Note that variables that are not simulated will \emph{always} be missing unless the routine is carrying out imputations. 
}

Most realistic models will contain lagged values of one or more variables as covariates. To initialise a simulation therefore, values for these variables are needed for an appropriate number of days prior to the first day of the simulation. The routine takes these values from the data file if they are present; if not, it uses the overall mean value of each variable, as computed from the cases used to fit the model and stored in the model definition objects. This overall mean may not be a particularly realistic value: for example, in a region with an annual temperature range of 20 degrees, if a simulation is initialised in the middle of winter with the overall mean temperature then the initial values are likely to be around 10 degrees too high. In most practical applications, the effects of such initial condition errors are likely to be short-lived. Nonetheless, it is worth inspecting plots of the simulation results (see the \code{\link[=print.GLCsim]{plot}} method) to check that the period of interest is not affected by initial conditions. To ensure this, in some situations it may be helpful to start the simulations a few months prior to the period of interest. The argument \code{daily.start} can then be used to prevent the "start-up" values from being written to the daily output files. 

Multivariate simulation cannot be carried out if there are direct or indirect circular dependencies between the variables. An example of a direct circular dependency would occur if the model for variable \eqn{A} included simultaneous (i.e. zero lag) values of \eqn{B} as covariates and vice versa. An indirect dependency would arise if \eqn{A} depended on \eqn{B}, \eqn{B} depended on \eqn{C} and \eqn{C} depended on \eqn{A}. The routine checks for circular dependencies, and terminates with an error message if any are found. Note that mutual dependence at lags greater than zero (e.g. \eqn{A} depends on the previous day's value of \eqn{B}, and \eqn{B} depends on the previous day's value of \eqn{A}) is not a problem. 

As well as simulating sequences from the fitted models, the routine can (and will, unless explicitly prevented from doing so) perform random imputations of missing values in the data files: this is done by simulating, for each day, from the distribution of the missing data values conditioned both upon the covariates in the models (including lagged values that were either observed or have already been imputed) and upon the non-missing observations for that day. This provides a means of quantifying uncertainties in quantities of interest due to missing observations. To prevent the routine from carrying out any imputation (i.e. to ensure that the simulations run freely and are not conditioned upon any observations except during initialisation), set the argument \code{impute.until} to a date preceding \code{start}.  

For more details on the algorithms used in the simulation and imputation routines, see the Appendices of the \href{../doc/manual.pdf}{PDF package manual}.
}
\value{The routine returns a \code{list} object of class \code{GLCsim}, for which \code{print} and \code{plot} methods are available - see the \link[=print.GLCsim]{object class documentation}. Use the \code{\link{names}} command to find the names of the list components. Many of them just duplicate arguments to the routine as called, although there are a few extra ones as well - most of these are self-explanatory. The component \code{RNGstate} stores the state of the \R random number generator on entry. This is a list containing two named elements: \code{RNGkind} and \code{seed}. \code{RNGkind} is the result of a call to \code{\link{RNGkind}} on entry; and \code{seed} is the result of a call to \code{\link{.Random.seed}}. This can be used to reinitialise the random number generator to the same state that was used to produce a particular simulation (see "Note" below) - although in most cases, this will be more conveniently achieved using a call to \code{\link{set.seed}}.
}
\references{
Yang, C., Chandler, R.E., Isham, V. and Wheater, H.S. (2005). Spatial-temporal rainfall simulation using Generalized Linear Models. \emph{Water Resources Research} \bold{41}, doi:10.1029/2004WR003739. 
}
\author{Richard Chandler (\email{r.chandler@ucl.ac.uk})}

\note{
Daily simulation files can be large, so sometimes it may be necessary to delete them after use if storage space is limited. In this case, the simulations can always be recreated by resetting the random number generator and calling \code{GLCsim} again with exactly the same arguments as stored in the resulting object. In general, the recommended way to reset the random number generator is using a call to \code{\link{set.seed}} immediately before the call to \code{GLCsim}. For completeness however, the \code{RNGstate} component of a \code{GLCsim} object stores the values of both \code{RNGkind} and \code{.Random.seed} on entry. 
}

%% ~Make other sections like Warning with \section{Warning }{....} ~

\seealso{\code{\link{GLCfit}} for information on \code{Rglimclim} model objects; also documentation for \link[=print.GLCsim]{GLCsim class methods}.
%% ~~objects to See Also as \code{\link{help}}, ~~~
}
%%\examples{
%%
%%}
% Add one or more standard keywords, see file 'KEYWORDS' in the
% R documentation directory.
\keyword{ ~kwd1 }
\keyword{ ~kwd2 }% __ONLY ONE__ keyword per line
